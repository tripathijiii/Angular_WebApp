mport java.util.*;
 class Graph {
        int c;
        static List<List<Integer>> bridges;
        private int V;

        private static LinkedList<Integer> adj[];
        int time = 0;
        static final int NIL = -1;


        @SuppressWarnings("unchecked")
        Graph(int v) {
            V = v;
            adj = new LinkedList[v];
            for (int i = 0; i < v; ++i)
                adj[i] = new LinkedList();
        }

        void addEdge(int v, int w) {
            adj[v].add(w);
            adj[w].add(v);
        }

        void bridgeUtil(int u, boolean visited[], int disc[],
                        int low[], int parent[]) {

            visited[u] = true;

            disc[u] = low[u] = ++time;

            Iterator<Integer> i = adj[u].iterator();
            while (i.hasNext()) {
                int v = i.next();

                if (!visited[v]) {
                    parent[v] = u;
                    bridgeUtil(v, visited, disc, low, parent);

                    low[u] = Math.min(low[u], low[v]);

                    if (low[v] > disc[u]){
                        List<Integer> l=new ArrayList<>();
                        l.add(u);
                        l.add(v);
                        bridges.add(l);
                        System.out.println(u + " " + v);}
                }


                else if (v != parent[u])
                    low[u] = Math.min(low[u], disc[v]);
            }
        }


        void bridge() {

            boolean visited[] = new boolean[V];
            int disc[] = new int[V];
            int low[] = new int[V];
            int parent[] = new int[V];

            for (int i = 0; i < V; i++) {
                parent[i] = NIL;
                visited[i] = false;
            }

            for (int i = 0; i < V; i++)
                if (visited[i] == false)
                    bridgeUtil(i, visited, disc, low, parent);
        }
        static Scanner sc=new Scanner(System.in);
        public static void main(String args[])
        {
            int T=sc.nextInt();
            for(int i=0;i<T;i++){
                bridges=new ArrayList<>();
                int n=sc.nextInt();
                Graph g1 = new Graph(n);
                int m=sc.nextInt();
                for(int e=0;e<m;e++){
                    int u=sc.nextInt();
                    int v=sc.nextInt();
                    g1.addEdge(u-1, v-1);

                }
                g1.bridge();
                
                System.out.print(bridges);
                Set<Integer> starts=new HashSet<>();
                Set<Integer> ends=new HashSet<>();
                
                for(List<Integer> b:bridges){
                    if(ends.contains(b.get(0)))ends.remove(b.get(0));
                    else starts.add(b.get(0));
                    
                    if(starts.contains(b.get(1)))starts.remove(b.get(1));
                    else ends.add(b.get(1));
                }
                

                System.out.println((n-starts.size())*starts.size());
            }




        }
    }
